plugins{
  id 'application'
}

group 'cloud.kopi.turnip'
version '1.0-SNAPSHOT'

repositories{
  mavenCentral()
}

java{
  toolchain{
    languageVersion = JavaLanguageVersion.of(16)
  }
}

tasks.withType(JavaCompile) {
  // show details of deprecated usage
  options.compilerArgs += "-Xlint:deprecation"
  // show details of unchecked or unsafe operations
  options.compilerArgs += "-Xlint:unchecked"
  // warn about dodgy finalizers
  options.compilerArgs += "-Xlint:finally"

  // UTF-8 everywhere - yes, even (especially!) when compiling 
  // your IDE should be set to UTF-8, too
  options.encoding = "UTF-8"

}
tasks.withType(Test) {
//  jvmArgs += ""
}
tasks.withType(JavaExec) {
//  jvmArgs += ""
//  environment << ["":""]
}

dependencies{
  // use SLf4J API to log against - pkg: org.slf4j
  // using 2.0.0 for turnip code because that's what jetty uses
  implementation 'org.slf4j:slf4j-api:2.0.0-alpha1'
  
  
  // embedded Jetty server - pkg: org.eclipse.jetty.server
  implementation 'org.eclipse.jetty:jetty-server:10.0.1'
  // Jetty support for Servlet API - pkg: org.eclipse.jetty.servlet
  implementation 'org.eclipse.jetty:jetty-servlet:10.0.1'

  // use logback at runtime for Turnip, Jetty, Spring, etc.
  runtimeOnly 'ch.qos.logback:logback-core:1.3.0-alpha5'
  runtimeOnly 'ch.qos.logback:logback-classic:1.3.0-alpha5'

  // use the standard jar instead of binding unnecessarily to Jetty
  // pkg: javax.servlet 
  // Spring doesn't yet support Servlet 5 (i.e. pkg: jakarta.servlet)
  compileOnly 'javax.servlet:javax.servlet-api:4.0.1'
  
  // add support for JSON serialization for Spring endpoints
  // can this be "runtimeOnly"?
  implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.2'
  
  // core spring/web - pkg: org.springframework
  implementation 'org.springframework:spring-webmvc:5.3.4'
  
  // core spring/web security - pkg: import org.sf.security
  implementation 'org.springframework.security:spring-security-core:5.4.5'
  // pkg: org.sf.security.web
  implementation 'org.springframework.security:spring-security-web:5.4.5'
  
  // support configuring through code - pkg: org.sf.security.config
  implementation 'org.springframework.security:spring-security-config:5.4.5'

//  implementation 'com.auth0:auth0-spring-security-api:1.4.1'

//  implementation 'org.springframework.security:spring-security-oauth2-core:5.4.5'
//  implementation 'org.springframework.security:spring-security-oauth2-client:5.4.5'
//  implementation 'org.springframework.security:spring-security-oauth2-jose:5.4.5'
//  implementation 'org.springframework.security:spring-security-oauth2-resource-server:5.4.5'
  
//  testImplementation 'org.springframework.security:spring-security-test:5.4.5'

  //  implementation("com.google.guava:guava:30.1.1-jre")



  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

application{
  mainClass = 'turnip.App'
}

applicationDefaultJvmArgs = [
  // UTC everywhere, always
  '-Duser.timezone=UTC',
  // UTF-8 everywhere, always
  "-Dfile.encoding=UTF-8",
  // for consistency, rather than any specific reason 
  "-Duser.language=", "-Duser.country=", "-Duser.variant=",
]

test{
  useJUnitPlatform()
}

task uberJar(type: Jar) {
  group "distribution"
  archiveClassifier = 'uber'

  // different name from standard jar and don't want version in the name
  archiveFileName = "turnip-app.jar"
  
  manifest{
    mainClassName = "turnip.App"
    duplicatesStrategy "EXCLUDE"
    attributes (
      'Main-Class': 'turnip.App',
      "Implementation-Title": "Turnip",
      "Implementation-Version": archiveVersion,
    )
  }
  
  dependsOn configurations.runtimeClasspath
  from sourceSets.main.output
  from {
    configurations.runtimeClasspath.findAll { 
      it.name.endsWith('jar') }.collect { zipTree(it) 
    }
  }
  
  doFirst{
    println "generating ubrJar to ${archiveFile.get()}"
  }
}